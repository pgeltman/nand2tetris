// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    //fetch instruction at ROM[PC]

    //MX1: Either take the output from the ALU or the next instruction, based on something from the CPU, but not sure what yet
    Mux16(a = instruction, b = ALUOut, sel = cIns, out = ARegIn);

    //A Reg, load pin instruction[10]???
    ARegister(in = ARegIn, load = ALoad, out = ARegOut, out[0..14] = addressM);

    //D register, load pin from instruction[11]
    DRegister(in = ALUOut, load = DLoad, out = DRegOut);

    //Program counter, not sure what causes the load pin, or increment pin
    PC(in = ARegIn, load = jump, inc = nojump, reset=reset, out[0..14] = pc);

    //MX2: Either take the output from the ALU or the next instruction, based on something from the CPU, but not sure what yet
    Mux16(a = ARegOut, b = inM, sel = instruction[3], out = MX2Out);

    //ALU
    ALU(x = DRegOut, y = MX2Out, zx = zx, nx = nx, zy = zy, ny = ny, f = f, no = no, out = outM, out = ALUOut, zr = zr, ng = ng);

    //CONTROL UNIT

    //variables that belong to the control UNIT
    //ARegLoad, DLoad, PCLoad, PCinc


    // i-xx-a-cccccc-ddd-jjj
    // i = instruction
    // a-ccccccc = computation
    // ddd = destination
    // jjj = jump

    //instruction[15] i = instruction type (0:A, 1:C) - MX1 selector bit
    Rename(in = instruction[15], out = cIns);
    //instruction[14] x
    //instruction[13] x
    //instruction[12] a = MX2 selector bit
    //instruction[11] c1 = zx bit
    Rename(in = instruction[11], out = zx);
    //instruction[10] c2 = nx bit
    Rename(in = instruction[10], out = nx);
    //instruction[9] c3 = zy bit
    Rename(in = instruction[9], out = zy);
    //instruction[8] c4 = ny bit
    Rename(in = instruction[8], out = ny);
    //instruction[7] c5 = f bit
    Rename(in = instruction[7], out = f);
    //instruction[6] c6 = no bit
    Rename(in = instruction[6], out = no);
    //instruction[5] d1 = ARegLoad
    Rename(in = instruction[4], out = ALoad);
    //instruction[4] d2 = DLoad
    Rename(in = instruction[4], out = DLoad);
    //instruction[3] d3 = writeM
    //instruction[2] j1 =
    Rename(in = instruction[2], out = j1);
    //instruction[1] j2 =
    Rename(in = instruction[1], out = j2);
    //instruction[0] j3 =
    Rename(in = instruction[0], out = j3);

    //JUMP COMMANDS TO PROGRAM COUNTER INTERPRETATION

    //checks to see if we care that the answer < 0 and then checks to see if the answer is < 0
    And(a = ng, b = j1, out = j1true);

    //checks to see if we care that the answer = 0 and then checks to see if the answer is 0
    And(a = zr, b = j2, out = j2true);

    //checks to see if either zr or ng are true
    Or(a = zr, b = ng, out = lessOrEqualTo);

    //negates the less than or equal to check
    Not(in = lessOrEqualTo, out = greaterThan);

    //checks to see if we care that the answer > 0 and then checks to see if the answer is > 0
    And(a = greaterThan, b = j2, out = j3true);

    //Runs a check to see if any of our jump conditions are met
    Or8Way(in[0] = j1true, in[1] = j2true, in[2] = j3true, out = jump);

    //if not jump, inc = true;
    Not(in = jump, out = nojump);
}
